// #pragma kernel CSMain
//
// // Define textures and buffers
// Texture2D<float4> _Texture;  // Main texture (iChannel0)
// Texture2D<float> _Noise;     // Noise texture (iChannel1)
// RWTexture2D<float4> _Result; // Output texture
//
// SamplerState samplerState; // Sampler state
//
// // Function to compute a hash based on input
// float2 Hash(float i) {
//     return sin(float2(3.0, 7.0) * i);
// }
//
// // Function to calculate the sum of a float3
// float Sum(float3 v) {
//     return v.x + v.y + v.z;
// }
//
// // The main kernel
// [numthreads(8, 8, 1)]
// void CSMain(uint3 id : SV_DispatchThreadID) {
//     // Get the texture coordinates
//     float2 uv = id.xy / float2(_Result.GetDimensions());
//
//     // Sample the variation pattern
//     float k = _Noise.SampleLevel(samplerState, 0.005 * uv, 0).x; // Cache-friendly lookup
//
//     // Compute index
//     float index = k * 8.0;
//     float i = floor(index);
//     float f = frac(index);
//
//     // Compute offsets for the virtual patterns
//     float2 offa = Hash(i);     // First pattern offset
//     float2 offb = Hash(i + 1); // Second pattern offset
//
//     // Compute derivatives for mip-mapping
//     float2 dx = ddx(uv); // Derivative in x
//     float2 dy = ddy(uv); // Derivative in y
//
//     // Sample the two closest virtual patterns
//     float3 cola = _Texture.SampleGrad(samplerState, uv + offa, dx, dy).xyz;
//     float3 colb = _Texture.SampleGrad(samplerState, uv + offb, dx, dy).xyz;
//
//     // Smooth interpolation between patterns
//     float weight = smoothstep(0.2, 0.8, f - 0.1 * Sum(cola - colb));
//     float3 result = lerp(cola, colb, weight);
//
//     // Write the result to the output texture
//     _Result[id.xy] = float4(result, 1.0);
// }
